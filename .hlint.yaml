# HLint configuration file
# https://github.com/ndmitchell/hlint
##########################

# This file contains a template configuration file, which is typically
# placed as .hlint.yaml in the root of your project


# Specify additional command line arguments
#
# - arguments: [--color, --cpp-simple, -XQuasiQuotes]


- extensions:
  - default: false   # All extensions are banned by default.
  - name:            # Only these listed extensions can be used.
    - DeriveFunctor
    - GADTs
    - GeneralizedNewtypeDeriving
    - LambdaCase
    - OverloadedStrings
#   - {name: CPP, within: CrossPlatform} # CPP can only be used in a given module

# - flags:
#   - {name: -w, within: []} # -w is allowed nowhere

- modules:
  - {name: Data.HashMap.Strict,     as: HM}
  - {name: Data.Ini,                as: Ini}
  - {name: Data.List.NonEmpty,      as: NE}
  - {name: Data.Map,                as: Map}
  - {name: Data.Set,                as: Set}
  - {name: Data.Text,               as: Text}
  - {name: Options.Applicative,     as: Opt
}
# - modules:
#   - {name: Control.Arrow, within: []} # Certain modules are banned entirely
#
# - functions:
#   - {name: unsafePerformIO, within: []} # unsafePerformIO can only appear in no modules


# Add custom hints for this project
#
# Will suggest replacing "wibbleMany [myvar]" with "wibbleOne myvar"
# - error: {lhs: "wibbleMany [x]", rhs: wibbleOne x}


# Turn on hints that are off by default
#
# Ban "module X(module X) where", to require a real export list
- warn: {name: Use explicit module export list}
#
# Replace a $ b $ c with a . b $ c
# - group: {name: dollar, enabled: true}
#
# Generalise map to fmap, ++ to <>
# - group: {name: generalise, enabled: true}


# - ignore: {name: Use camelCase}


# Define some custom infix operators
# - fixity: infixr 3 ~^#^~


# To generate a suitable file for HLint do:
# $ hlint --default > .hlint.yaml
